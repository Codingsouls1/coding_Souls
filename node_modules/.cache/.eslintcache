[{"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\index.js":"1","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\layouts\\Admin.js":"2","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\routes.js":"3","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Navbars\\AdminNavbar.js":"4","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Sidebar\\Sidebar.js":"5","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Footers\\AdminFooter.js":"6","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Calendar.js":"7","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\dashboards\\Dashboard.js":"8","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Headers\\SimpleHeader.js":"9","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Cordinator\\Cordinator.js":"10","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\ContactUs\\Contactus.js":"11","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Register\\Register.js":"12","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\AllStudent\\AllStudent.js":"13","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Register\\index.js":"14","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Admin\\Admin.js":"15","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Login\\index.js":"16","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Calendar\\index.js":"17"},{"size":1509,"mtime":1649754515943,"results":"18","hashOfConfig":"19"},{"size":3318,"mtime":1649337340380,"results":"20","hashOfConfig":"19"},{"size":2010,"mtime":1649745679603,"results":"21","hashOfConfig":"19"},{"size":3596,"mtime":1649491950985,"results":"22","hashOfConfig":"19"},{"size":10098,"mtime":1649491894678,"results":"23","hashOfConfig":"19"},{"size":1964,"mtime":1649754038811,"results":"24","hashOfConfig":"19"},{"size":23298,"mtime":1649755903208,"results":"25","hashOfConfig":"19"},{"size":10835,"mtime":1649755847305,"results":"26","hashOfConfig":"19"},{"size":2537,"mtime":1649262281025,"results":"27","hashOfConfig":"19"},{"size":2801,"mtime":1649754436238,"results":"28","hashOfConfig":"19"},{"size":6027,"mtime":1649749782408,"results":"29","hashOfConfig":"19"},{"size":10908,"mtime":1649755682877,"results":"30","hashOfConfig":"19"},{"size":4599,"mtime":1649753602905,"results":"31","hashOfConfig":"19"},{"size":865,"mtime":1649752585533,"results":"32","hashOfConfig":"19"},{"size":3299,"mtime":1649755880926,"results":"33","hashOfConfig":"19"},{"size":437,"mtime":1649588505305,"results":"34","hashOfConfig":"19"},{"size":1752,"mtime":1649660616509,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"supyrj",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\index.js",[],["72","73"],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\layouts\\Admin.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\routes.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Footers\\AdminFooter.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Calendar.js",["74","75","76","77"],"// /*!\n\n// =========================================================\n// * Argon Dashboard PRO React - v1.2.1\n// =========================================================\n\n// * Product Page: https://www.creative-tim.com/product/argon-dashboard-pro-react\n// * Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\n// * Coded by Creative Tim\n\n// =========================================================\n\n// * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// */\nimport React from \"react\";\n// nodejs library that concatenates classes\nimport classnames from \"classnames\";\n// JavaScript library that creates a callendar with events\nimport { Calendar } from \"@fullcalendar/core\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interaction from \"@fullcalendar/interaction\";\n// react component used to create sweet alerts\nimport ReactBSAlert from \"react-bootstrap-sweetalert\";\n// reactstrap components\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  Input,\n  Modal,\n  Container,\n  Row,\n  Col,\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n} from \"reactstrap\";\n\n//React Datepicker\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n//Api Call\nimport { getAllEvents } from \"api/Calendar\";\nimport { createAllEvents } from \"api/Calendar\";\nimport { editAllEvents } from \"api/Calendar\";\nimport { deleteAllEvents } from \"api/Calendar\";\n\n//Import react-toastify\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nlet calendar;\n\nfunction CalendarView() {\n  const [startDate, setStartDate] = React.useState(new Date());\n  const [endDate, setEndDate] = React.useState(new Date());\n  const [events, setEvents] = React.useState(null);\n  const [alert, setAlert] = React.useState(null);\n  const [modalAdd, setModalAdd] = React.useState(false);\n  const [modalChange, setModalChange] = React.useState(false);\n  const [radios, setRadios] = React.useState(null);\n  const [eventId, setEventId] = React.useState(null);\n  const [eventTitle, setEventTitle] = React.useState(null);\n  const [eventDescription, setEventDescription] = React.useState(null);\n  const [description, setDescription] = React.useState(null);\n  const [event, setEvent] = React.useState(null);\n  const [currentDate, setCurrentDate] = React.useState(null);\n  const calendarRef = React.useRef(null);\n  const [check, setCheck] = React.useState(true);\n\n  const createCalendar = () => {\n    calendar = new Calendar(calendarRef.current, {\n      plugins: [interaction, dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      selectable: true,\n      headerToolbar: \"\",\n\n      // Add new event\n      select: (info) => {\n        console.log(\"info\", info);\n        setModalAdd(true);\n        setStartDate(startDate);\n        setEndDate(endDate);\n        setRadios(\"bg-info\");\n      },\n\n      // Edit calendar event action\n      eventClick: ({ event }) => {\n        console.log(\"event\", event);\n        setEventId(event.id);\n        setEventTitle(event.title);\n        setDescription(event.extendedProps.description);\n        setRadios(\"exams\");\n        setEvent(event);\n        setModalChange(true);\n      },\n    });\n    calendar.render();\n    setCurrentDate(calendar.view.title);\n  };\n\n  const changeView = (newView) => {\n    calendar.changeView(newView);\n    setCurrentDate(calendar.view.title);\n  };\n\n  React.useEffect(() => {\n    //ffy eslint-disable-next-line\n    createCalendar();\n    getEvents();\n  }, [check]);\n\n  //Get All Events\n  const getEvents = async () => {\n    const allEvents = await getAllEvents();\n    const array = allEvents.map((even) => {\n      console.log(even);\n      return calendar.addEvent({\n        title: even.event_name,\n        start: even.start_date,\n        end: even.end_date,\n        className: even.event_type,\n        description: even.description,\n        id: even._id,\n      });\n    });\n    setEvents(array);\n  };\n\n  //Add Events\n  const addNewEvent = async (e) => {\n    e.preventDefault();\n    const row = {\n      event_name: eventTitle,\n      start_date: new Date(startDate),\n      end_date: new Date(endDate),\n      description: description,\n      event_type: radios,\n    };\n    try {\n      if (localStorage.getItem(\"token\")) {\n        await createAllEvents(row);\n        toast.success(\"Evnet Added Successfully\");\n        if (check === true) {\n          setCheck(false);\n        } else {\n          setCheck(true);\n        }\n        setModalAdd(false);\n        // setEvents(newEvents);\n        setStartDate(undefined);\n        setEndDate(undefined);\n        setRadios(\"bg-info\");\n        setEventTitle(undefined);\n      } else {\n        return toast.error(\"Your are not Login as Admin!\");\n      }\n    } catch (err) {\n      toast.error(\"Something Went Wrong!\");\n    }\n  };\n\n  //Update Events\n  const changeEvent = async () => {\n    const row = {\n      event_name: eventTitle,\n      start_date: new Date(startDate),\n      end_date: new Date(endDate),\n      description: description,\n      event_type: radios,\n    };\n    try {\n      if (localStorage.getItem(\"token\")) {\n        const updateEvents = await editAllEvents(eventId, row);\n        setEvents(updateEvents);\n        toast.success(\"Events Updated Successfully\");\n        if (check === true) {\n          setCheck(false);\n        } else {\n          setCheck(true);\n        }\n      } else {\n        return toast.error(\"You are not Login as Admin!\");\n      }\n    } catch (err) {\n      toast.error(\"Something Went Wrong!\");\n    }\n    setModalChange(false);\n    setRadios(\"bg-info\");\n    setEventTitle(undefined);\n    setEventDescription(undefined);\n    setEventId(undefined);\n    setEvent(undefined);\n  };\n\n  //Delete Events Confirm Box\n  const deleteEventSweetAlert = () => {\n    setAlert(\n      <ReactBSAlert\n        warning\n        style={{ display: \"block\", marginTop: \"-100px\" }}\n        title=\"Are you sure?\"\n        onConfirm={() => {\n          setAlert(false);\n          setRadios(\"bg-info\");\n          setEventTitle(undefined);\n          setEventDescription(undefined);\n          setEventId(undefined);\n        }}\n        onCancel={() => deleteEvent()}\n        confirmBtnCssClass=\"btn-secondary\"\n        cancelBtnBsStyle=\"danger\"\n        confirmBtnText=\"Cancel\"\n        cancelBtnText=\"Yes, delete it\"\n        showCancel\n        btnSize=\"\"\n      >\n        You won't be able to revert this!\n      </ReactBSAlert>\n    );\n  };\n\n  //Delete Events\n  const deleteEvent = async () => {\n    try {\n      if (localStorage.getItem(\"token\")) {\n        const deleEvents = await deleteAllEvents(eventId);\n        if (check === true) {\n          setCheck(false);\n        } else {\n          setCheck(true);\n        }\n        setEvent(undefined);\n        setAlert(\n          <ReactBSAlert\n            success\n            style={{ display: \"block\", marginTop: \"-100px\" }}\n            title=\"Success\"\n            onConfirm={() => setAlert(null)}\n            onCancel={() => setAlert(null)}\n            confirmBtnBsStyle=\"primary\"\n            confirmBtnText=\"Ok\"\n            btnSize=\"\"\n          ></ReactBSAlert>\n        );\n        setEvents(deleEvents);\n        setCheck(true);\n      } else {\n        return toast.error(\"You are not Login as Admin!\");\n      }\n    } catch (err) {\n      toast.error(\"Something Went Wrong!\");\n    }\n    setModalChange(false);\n    setRadios(\"bg-info\");\n    setEventTitle(undefined);\n    setEventDescription(undefined);\n    setEventId(undefined);\n    setEvent(undefined);\n  };\n\n  return (\n    <>\n      {alert}\n      <ToastContainer\n        position=\"bottom-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        theme=\"colored\"\n      />\n      <div className=\"header header-dark bg-info pb-6 content__title content__title--calendar\">\n        <Container fluid>\n          <div className=\"header-body\">\n            <Row className=\"align-items-center py-4\">\n              <Col lg=\"6\">\n                <h6 className=\"fullcalendar-title h2 text-white d-inline-block mb-0 mr-1\">\n                  {currentDate}\n                </h6>\n                <Breadcrumb\n                  className=\"d-none d-md-inline-block ml-lg-4\"\n                  listClassName=\"breadcrumb-links breadcrumb-dark\"\n                >\n                  <BreadcrumbItem>\n                    <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                      <i className=\"fas fa-home\" />\n                    </a>\n                  </BreadcrumbItem>\n                  <BreadcrumbItem>\n                    <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                      Dashboard\n                    </a>\n                  </BreadcrumbItem>\n                  <BreadcrumbItem aria-current=\"page\" className=\"active\">\n                    Calendar\n                  </BreadcrumbItem>\n                </Breadcrumb>\n              </Col>\n              <Col className=\"mt-3 mt-md-0 text-md-right\" lg=\"6\">\n                <Button\n                  className=\"fullcalendar-btn-prev btn-neutral\"\n                  color=\"default\"\n                  onClick={() => {\n                    calendar.next();\n                  }}\n                  size=\"sm\"\n                >\n                  <i className=\"fas fa-angle-left\" />\n                </Button>\n                <Button\n                  className=\"fullcalendar-btn-next btn-neutral\"\n                  color=\"default\"\n                  onClick={() => {\n                    calendar.prev();\n                  }}\n                  size=\"sm\"\n                >\n                  <i className=\"fas fa-angle-right\" />\n                </Button>\n                <Button\n                  className=\"btn-neutral\"\n                  color=\"default\"\n                  data-calendar-view=\"month\"\n                  onClick={() => changeView(\"dayGridMonth\")}\n                  size=\"sm\"\n                >\n                  Month\n                </Button>\n                <Button\n                  className=\"btn-neutral\"\n                  color=\"default\"\n                  data-calendar-view=\"basicWeek\"\n                  onClick={() => changeView(\"dayGridWeek\")}\n                  size=\"sm\"\n                >\n                  Week\n                </Button>\n                <Button\n                  className=\"btn-neutral\"\n                  color=\"default\"\n                  data-calendar-view=\"basicDay\"\n                  onClick={() => changeView(\"dayGridDay\")}\n                  size=\"sm\"\n                >\n                  Day\n                </Button>\n              </Col>\n            </Row>\n          </div>\n        </Container>\n      </div>\n      <Container className=\"mt--6\" fluid>\n        <Row>\n          <div className=\"col\">\n            <Card className=\"card-calendar\">\n              <CardHeader>\n                <h5 className=\"h3 mb-0\">Calendar</h5>\n              </CardHeader>\n              <CardBody className=\"p-0\">\n                <div\n                  className=\"calendar\"\n                  data-toggle=\"calendar\"\n                  id=\"calendar\"\n                  ref={calendarRef}\n                />\n              </CardBody>\n            </Card>\n            <Modal\n              isOpen={modalAdd}\n              toggle={() => setModalAdd(false)}\n              className=\"modal-dialog-centered modal-secondary\"\n            >\n              <div className=\"modal-body\">\n                <form className=\"new-event--form\" onSubmit={addNewEvent}>\n                  <FormGroup>\n                    <label className=\"form-control-label\">Event title</label>\n                    <Input\n                      className=\"form-control-alternative new-event--title\"\n                      placeholder=\"Event Title\"\n                      type=\"text\"\n                      onChange={(e) => setEventTitle(e.target.value)}\n                      required\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <label\n                      className=\"form-control-label\"\n                      htmlFor=\"example-date-input\"\n                    >\n                      From\n                    </label>\n                    <DatePicker\n                      className=\"p-2 w-100 border border-light\"\n                      showTimeSelect\n                      dateFormat=\"yyyy MMMM, dd h:mm aa\"\n                      selected={startDate}\n                      selectsStart\n                      startDate={startDate}\n                      onChange={(date) => setStartDate(date)}\n                      strictParsing\n                      value={startDate}\n                      required\n                    />\n                    <label\n                      className=\"form-control-label\"\n                      htmlFor=\"example-date-input\"\n                    >\n                      To\n                    </label>\n                    <DatePicker\n                      className=\"p-2 w-100 border border-light\"\n                      showTimeSelect\n                      dateFormat=\"yyyy MMMM, dd h:mm aa\"\n                      selected={endDate}\n                      selectsStart\n                      startDate={endDate}\n                      onChange={(date) => setEndDate(date)}\n                      strictParsing\n                      value={endDate}\n                      required\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <label className=\"form-control-label\">Description</label>\n                    <textarea\n                      className=\"form-control-alternative new-event--title w-100 descrip\"\n                      placeholder=\"Description\"\n                      type=\"text\"\n                      onChange={(e) => setDescription(e.target.value)}\n                      required\n                    />\n                  </FormGroup>\n                  <FormGroup className=\"mb-0\">\n                    <label className=\"form-control-label d-block mb-3\">\n                      Status color\n                    </label>\n                    <ButtonGroup\n                      className=\"btn-group-toggle btn-group-colors event-tag\"\n                      data-toggle=\"buttons\"\n                    >\n                      <Button\n                        className={classnames(\"bg-info\", {\n                          active: radios === \"bg-info\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-info\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-warning\", {\n                          active: radios === \"bg-warning\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-warning\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-danger\", {\n                          active: radios === \"bg-danger\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-danger\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-success\", {\n                          active: radios === \"bg-success\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-success\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-default\", {\n                          active: radios === \"bg-default\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-default\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-primary\", {\n                          active: radios === \"bg-primary\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-primary\")}\n                      />\n                    </ButtonGroup>\n                  </FormGroup>\n                  <div className=\"modal-footer\">\n                    <Button\n                      className=\"new-event--add\"\n                      color=\"primary\"\n                      type=\"submit\"\n                    >\n                      Add event\n                    </Button>\n                    <Button\n                      className=\"ml-auto\"\n                      color=\"link\"\n                      type=\"button\"\n                      onClick={() => setModalAdd(false)}\n                    >\n                      Close\n                    </Button>\n                  </div>\n                </form>\n              </div>\n            </Modal>\n            <Modal\n              isOpen={modalChange}\n              toggle={() => setModalChange(false)}\n              className=\"modal-dialog-centered modal-secondary\"\n            >\n              <div className=\"modal-body\">\n                <Form className=\"edit-event--form\">\n                  <FormGroup>\n                    <label className=\"form-control-label\">Event title</label>\n                    <Input\n                      className=\"form-control-alternative edit-event--title\"\n                      placeholder=\"Event Title\"\n                      type=\"text\"\n                      defaultValue={eventTitle}\n                      onChange={(e) => setEventTitle(e.target.value)}\n                      required\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label\n                      className=\"form-control-label\"\n                      htmlFor=\"example-date-input\"\n                    >\n                      From\n                    </Label>\n                    <DatePicker\n                      className=\"p-2 endDate\"\n                      showTimeSelect\n                      dateFormat=\"yyyy MMMM, dd h:mm aa\"\n                      selected={startDate}\n                      selectsStart\n                      startDate={startDate}\n                      onChange={(date) => setStartDate(date)}\n                      strictParsing\n                      value={startDate}\n                      required\n                    />\n                    <Label\n                      className=\"form-control-label\"\n                      htmlFor=\"example-date-input\"\n                    >\n                      To\n                    </Label>\n                    <DatePicker\n                      className=\"p-2 endDate\"\n                      showTimeSelect\n                      dateFormat=\"yyyy MMMM, dd h:mm aa\"\n                      // dateFormat=\"'YYYY-MM-dd', h:mm\"\n                      selected={endDate}\n                      selectsStart\n                      startDate={endDate}\n                      onChange={(date) => setEndDate(date)}\n                      strictParsing\n                      value={endDate}\n                      required\n                    />\n                  </FormGroup>\n\n                  <FormGroup>\n                    <label className=\"form-control-label\">Description</label>\n                    <Input\n                      className=\"form-control-alternative edit-event--description textarea-autosize\"\n                      placeholder=\"Event Desctiption\"\n                      type=\"textarea\"\n                      defaultValue={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      required\n                    />\n                    <i className=\"form-group--bar\" />\n                  </FormGroup>\n                  <input className=\"edit-event--id\" type=\"hidden\" />\n                  <FormGroup className=\"mb-0\">\n                    <label className=\"form-control-label d-block mb-3\">\n                      Status color\n                    </label>\n                    <ButtonGroup\n                      className=\"btn-group-toggle btn-group-colors event-tag\"\n                      data-toggle=\"buttons\"\n                    >\n                      <Button\n                        className={classnames(\"bg-info\", {\n                          active: radios === \"bg-info\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-info\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-warning\", {\n                          active: radios === \"bg-warning\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-warning\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-danger\", {\n                          active: radios === \"bg-danger\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-danger\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-success\", {\n                          active: radios === \"bg-success\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-success\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-default\", {\n                          active: radios === \"bg-default\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-default\")}\n                      />\n                      <Button\n                        className={classnames(\"bg-primary\", {\n                          active: radios === \"bg-primary\",\n                        })}\n                        color=\"\"\n                        type=\"button\"\n                        onClick={() => setRadios(\"bg-primary\")}\n                      />\n                    </ButtonGroup>\n                  </FormGroup>\n                </Form>\n              </div>\n              <div className=\"modal-footer\">\n                <Button color=\"primary\" onClick={changeEvent}>\n                  Update\n                </Button>\n                <Button\n                  color=\"danger\"\n                  onClick={() => {\n                    setModalChange(false);\n                    deleteEventSweetAlert();\n                  }}\n                >\n                  Delete\n                </Button>\n                <Button\n                  className=\"ml-auto\"\n                  color=\"link\"\n                  onClick={() => setModalChange(false)}\n                >\n                  Close\n                </Button>\n              </div>\n            </Modal>\n          </div>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default CalendarView;\n","C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\dashboards\\Dashboard.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\components\\Headers\\SimpleHeader.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Cordinator\\Cordinator.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\ContactUs\\Contactus.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Register\\Register.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\AllStudent\\AllStudent.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Register\\index.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\views\\pages\\Admin\\Admin.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Login\\index.js",[],"C:\\Users\\kulde\\Downloads\\New folder\\argon-dashboard-pro-react-v1.2.1\\src\\api\\Calendar\\index.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":64,"column":10,"nodeType":"84","messageId":"85","endLine":64,"endColumn":16},{"ruleId":"82","severity":1,"message":"86","line":71,"column":10,"nodeType":"84","messageId":"85","endLine":71,"endColumn":26},{"ruleId":"82","severity":1,"message":"87","line":73,"column":10,"nodeType":"84","messageId":"85","endLine":73,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":118,"column":6,"nodeType":"90","endLine":118,"endColumn":13,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'events' is assigned a value but never used.","Identifier","unusedVar","'eventDescription' is assigned a value but never used.","'event' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'createCalendar'. Either include it or remove the dependency array.","ArrayExpression",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [check, createCalendar]",{"range":"97","text":"98"},[3575,3582],"[check, createCalendar]"]