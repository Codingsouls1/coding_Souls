{"ast":null,"code":"import React, { useEffect, Fragment, useState, useRef, useCallback } from 'react';\nimport { Button, Modal, Checkbox, Input, Table as Table$1 } from 'antd';\nimport Papa from 'papaparse';\nimport difference from 'lodash-es/difference';\nimport union from 'lodash-es/union';\nimport get from 'lodash-es/get';\nimport set from 'lodash-es/set';\nimport debounceFn from 'lodash-es/debounce';\nimport Fuse from 'fuse.js';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\nvar getFieldsFromColumns = function getFieldsFromColumns(columns) {\n  var fields = {};\n  columns == null ? void 0 : columns.forEach(function (column) {\n    var _ref;\n\n    var title = column.title,\n        key = column.key,\n        dataIndex = column.dataIndex;\n    var fieldName = (_ref = Array.isArray(dataIndex) ? dataIndex.join(\".\") : dataIndex) != null ? _ref : key;\n\n    if (fieldName) {\n      set(fields, fieldName, title);\n    }\n  });\n  return fields;\n};\n\nvar cleanupDataSource = function cleanupDataSource(dataSource, exportFieldNames, selectedFields) {\n  if (!dataSource || dataSource.length === 0) {\n    return {\n      data: [],\n      fields: []\n    };\n  }\n\n  var newData = [].concat(dataSource);\n  var fields = selectedFields.map(function (fieldName) {\n    var fieldValue = get(exportFieldNames, fieldName);\n\n    if (typeof fieldValue === \"string\") {\n      return fieldValue;\n    }\n\n    return fieldValue.header || \"\";\n  });\n  var data = newData.map(function (record, rowIndex) {\n    return selectedFields.map(function (fieldName) {\n      var fieldValue = get(exportFieldNames, fieldName);\n      var recordValue = get(record, fieldName);\n\n      if (typeof fieldValue === \"string\") {\n        return recordValue;\n      }\n\n      return (fieldValue == null ? void 0 : fieldValue.formatter(recordValue, record, rowIndex)) || null;\n    });\n  });\n  return [fields].concat(data);\n};\n\nvar ExportTableButton = function ExportTableButton(props) {\n  var _props$children;\n\n  var _props$dataSource = props.dataSource,\n      dataSource = _props$dataSource === void 0 ? [] : _props$dataSource,\n      fileName = props.fileName,\n      fields = props.fields,\n      disabled = props.disabled,\n      btnProps = props.btnProps,\n      _props$columns = props.columns,\n      columns = _props$columns === void 0 ? [] : _props$columns,\n      _props$showColumnPick = props.showColumnPicker,\n      showColumnPicker = _props$showColumnPick === void 0 ? false : _props$showColumnPick;\n\n  var _React$useState = React.useState(false),\n      showModal = _React$useState[0],\n      setShowModal = _React$useState[1];\n\n  var fieldsOrColumns = fields != null ? fields : getFieldsFromColumns(columns);\n\n  var _React$useState2 = React.useState(function () {\n    if (fields) {\n      return Object.keys(fields);\n    } else if (columns) {\n      return Object.keys(getFieldsFromColumns(columns));\n    }\n\n    return [];\n  }),\n      selectedFields = _React$useState2[0],\n      setSelectedFields = _React$useState2[1];\n\n  useEffect(function () {\n    if (fields) {\n      setSelectedFields(Object.keys(fields));\n    } else if (columns) {\n      setSelectedFields(Object.keys(getFieldsFromColumns(columns)));\n    }\n  }, [fields, columns]);\n  var handleDownloadCSV = React.useCallback(function () {\n    if (!dataSource) {\n      return;\n    }\n\n    var selectedFieldsInOriginalOrder = Object.keys(fieldsOrColumns).filter(function (name) {\n      return selectedFields.indexOf(name) > -1;\n    });\n    var data = cleanupDataSource(dataSource, fieldsOrColumns, selectedFieldsInOriginalOrder);\n    var csv = Papa.unparse(data, {\n      greedy: true,\n      header: false\n    });\n    var blob = new Blob([csv]);\n    var a = window.document.createElement(\"a\");\n    a.href = window.URL.createObjectURL(blob);\n    a.download = (fileName || \"table\") + \".csv\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    setShowModal(false);\n  }, [dataSource, fieldsOrColumns, selectedFields, fileName]);\n  var handleCheckboxChange = React.useCallback(function (key, checked) {\n    var newSelectedFields = [].concat(selectedFields);\n\n    if (checked) {\n      newSelectedFields = union(newSelectedFields, [key]);\n    } else {\n      newSelectedFields = difference(newSelectedFields, [key]);\n    }\n\n    setSelectedFields(newSelectedFields);\n  }, [selectedFields]);\n  return React.createElement(Fragment, null, React.createElement(Button, Object.assign({\n    onClick: function onClick() {\n      return showColumnPicker ? setShowModal(true) : handleDownloadCSV();\n    },\n    disabled: disabled\n  }, btnProps), (_props$children = props.children) != null ? _props$children : \"Export to CSV\"), showColumnPicker ? React.createElement(Modal, {\n    visible: showModal,\n    onOk: function onOk() {\n      return handleDownloadCSV();\n    },\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    width: 400,\n    okButtonProps: {\n      disabled: selectedFields.length < 1,\n      title: selectedFields.length < 1 ? \"Please select at least one column.\" : null\n    },\n    okText: \"Export\",\n    title: \"Select columns to export\"\n  }, React.createElement(\"div\", {\n    className: \"d-flex flex-column align-start\"\n  }, Object.entries(fieldsOrColumns).map(function (_ref2) {\n    var _value$header;\n\n    var key = _ref2[0],\n        value = _ref2[1];\n    return React.createElement(Checkbox, {\n      key: key,\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      defaultChecked: true,\n      checked: selectedFields.indexOf(key) > -1,\n      onChange: function onChange(e) {\n        return handleCheckboxChange(key, e.target.checked);\n      }\n    }, typeof value === \"string\" ? value : (_value$header = value == null ? void 0 : value.header) != null ? _value$header : \"\");\n  }))) : null);\n};\n\nvar getGroupedColumnKeysFromChildren = function getGroupedColumnKeysFromChildren(column, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(column.children), _step; !(_step = _iterator()).done;) {\n    var child = _step.value;\n\n    if (child.children && Array.isArray(child.children)) {\n      // If child has children, recurse\n      keys = getGroupedColumnKeysFromChildren(child, keys);\n    } else {\n      if (!child.dataIndex) {\n        continue;\n      }\n\n      if (Array.isArray(child.dataIndex)) {\n        keys = [].concat(keys, [child.dataIndex.join(\".\")]);\n        continue;\n      }\n\n      keys = [].concat(keys, [child.dataIndex]);\n    }\n  }\n\n  return keys;\n};\n\nvar createDefaultFuseKeys = function createDefaultFuseKeys(dataSource, columns) {\n  var firstRecord = dataSource == null ? void 0 : dataSource[0];\n  var keys = columns.map(function (column) {\n    var dataIndex = column.dataIndex,\n        children = column.children; // check if grouped column\n\n    if (children && Array.isArray(children)) {\n      var _keys = getGroupedColumnKeysFromChildren(column, []);\n\n      return _keys == null ? void 0 : _keys.flat();\n    } // ant table allows nested objects with array of strings as dataIndex\n\n\n    if (Array.isArray(dataIndex)) {\n      return dataIndex.join(\".\");\n    } // If in actual dataIndex the record is object literal but column specified as string, throw error.\n    // Even though it's something you shouldn't do based on ant table's API, since users will see fuse.js `value.trim is not a function error` I'm throwing error.\n\n\n    if (firstRecord && Object.prototype.toString.call(firstRecord[dataIndex]) === \"[object Object]\" && typeof dataIndex === \"string\") {\n      throw new Error(\"'\" + dataIndex + \"' is an object in dataSource. But dataIndex is given as string. If it is an object, use array of strings as dataIndex.\");\n    }\n\n    return dataIndex;\n  }).filter(function (dataIndex) {\n    return !!dataIndex;\n  }).flat(10).filter(function (dataIndex) {\n    return typeof dataIndex === \"string\";\n  }); // after flattening max depth 10, if there are still arrays, ignore\n\n  return keys;\n};\n\nvar SearchTableInput = function SearchTableInput(_ref) {\n  var _ref$searchFunction = _ref.searchFunction,\n      searchFunction = _ref$searchFunction === void 0 ? null : _ref$searchFunction,\n      dataSource = _ref.dataSource,\n      setDataSource = _ref.setDataSource,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? true : _ref$debounce,\n      _ref$inputProps = _ref.inputProps,\n      inputProps = _ref$inputProps === void 0 ? {\n    placeholder: \"Search...\"\n  } : _ref$inputProps,\n      _ref$fuzzySearch = _ref.fuzzySearch,\n      fuzzySearch = _ref$fuzzySearch === void 0 ? false : _ref$fuzzySearch,\n      columns = _ref.columns,\n      fuseProps = _ref.fuseProps;\n\n  var _useState = useState(\"\"),\n      query = _useState[0],\n      setQuery = _useState[1];\n\n  var allData = useRef();\n  var fuse = useRef();\n\n  var _fuseProps = React.useMemo(function () {\n    return _extends({\n      keys: createDefaultFuseKeys(dataSource, columns),\n      threshold: fuzzySearch ? 0.6 : 0\n    }, fuseProps);\n  }, [fuseProps, dataSource, columns, fuzzySearch]);\n\n  var searchTable = function searchTable(_dataSource, searchTerm) {\n    if (searchTerm === void 0) {\n      searchTerm = \"\";\n    }\n\n    if (searchTerm === \"\" || !fuse || !fuse.current) {\n      return allData.current;\n    }\n\n    var newResults = fuse.current.search(searchTerm).map(function (res) {\n      return res.item;\n    });\n    return newResults;\n  };\n\n  var searchTableDebounced = React.useCallback(debounceFn(function (dataSource, searchTerm, searchFn) {\n    var results = searchFn == null ? void 0 : searchFn(dataSource, searchTerm);\n    setDataSource(results);\n  }, 100, {\n    leading: false,\n    trailing: true\n  }), []);\n\n  var handleInputChange = function handleInputChange(e) {\n    var value = e.target.value;\n    setQuery(value);\n\n    if (debounce) {\n      searchTableDebounced(dataSource, value, searchFunction != null ? searchFunction : searchTable);\n    } else {\n      var _searchFunction;\n\n      var results = (_searchFunction = searchFunction == null ? void 0 : searchFunction(dataSource, value)) != null ? _searchFunction : searchTable(dataSource, value);\n      setDataSource(results);\n    }\n  };\n\n  useEffect(function () {\n    if (!dataSource) {\n      return;\n    }\n\n    allData.current = [].concat(dataSource);\n    fuse.current = new Fuse(dataSource, _fuseProps);\n  }, [dataSource, _fuseProps]);\n  useEffect(function () {\n    // If dataSource updates dynamically (for example, swr or react-query mutates) and the input box is not empty,\n    // It should keep the new dataSource filtered if there is a value in input box\n    if (!dataSource || !query) {\n      return;\n    }\n\n    if (debounce) {\n      searchTableDebounced(dataSource, query, searchFunction != null ? searchFunction : searchTable);\n    } else {\n      var _searchFunction2;\n\n      var results = (_searchFunction2 = searchFunction == null ? void 0 : searchFunction(dataSource, query)) != null ? _searchFunction2 : searchTable(dataSource, query);\n      setDataSource(results);\n    }\n  }, [query, dataSource, searchTableDebounced, searchFunction, setDataSource, debounce]);\n  return React.createElement(Input, Object.assign({\n    value: query,\n    onChange: handleInputChange,\n    placeholder: \"Search...\",\n    allowClear: true\n  }, inputProps));\n};\n\nfunction useMountedState() {\n  var ref = useRef(false);\n  var state = useCallback(function () {\n    return ref.current;\n  }, []);\n  useEffect(function () {\n    ref.current = true;\n    return function () {\n      ref.current = false;\n    };\n  });\n  return state;\n}\n\nvar Table = function Table(_ref) {\n  var _searchableProps$inpu;\n\n  var _ref$exportable = _ref.exportable,\n      exportable = _ref$exportable === void 0 ? false : _ref$exportable,\n      exportableProps = _ref.exportableProps,\n      _ref$searchable = _ref.searchable,\n      searchable = _ref$searchable === void 0 ? false : _ref$searchable,\n      searchableProps = _ref.searchableProps,\n      dataSource = _ref.dataSource,\n      columns = _ref.columns,\n      otherProps = _objectWithoutPropertiesLoose(_ref, [\"exportable\", \"exportableProps\", \"searchable\", \"searchableProps\", \"dataSource\", \"columns\"]);\n\n  var isMounted = useMountedState();\n  var isExportable = exportable || exportableProps;\n  var isSearchable = searchable || searchableProps;\n\n  var _useState = useState(dataSource),\n      searchDataSource = _useState[0],\n      setSearchDataSource = _useState[1];\n\n  useEffect(function () {\n    if (isSearchable && isMounted()) {\n      setSearchDataSource(dataSource);\n    }\n  }, [isSearchable, dataSource, isMounted]);\n  return React.createElement(\"div\", null, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      marginBottom: 10\n    }\n  }, isExportable ? React.createElement(ExportTableButton, Object.assign({\n    dataSource: dataSource,\n    columns: columns\n  }, exportableProps)) : null, isSearchable ? React.createElement(SearchTableInput, Object.assign({\n    columns: columns,\n    dataSource: dataSource,\n    setDataSource: setSearchDataSource\n  }, searchableProps, {\n    inputProps: _extends({\n      style: _extends({\n        width: isExportable ? \"60%\" : \"100%\"\n      }, searchableProps == null ? void 0 : (_searchableProps$inpu = searchableProps.inputProps) == null ? void 0 : _searchableProps$inpu.style)\n    }, searchableProps == null ? void 0 : searchableProps.inputProps)\n  })) : null), React.createElement(Table$1, Object.assign({\n    dataSource: isSearchable ? searchDataSource : dataSource,\n    columns: columns\n  }, otherProps)));\n};\n\nexport { ExportTableButton, SearchTableInput, Table };","map":{"version":3,"sources":["../src/ExportTableButton.tsx","../src/SearchTableInput.tsx","../src/hooks/isMounted.tsx","../src/index.tsx"],"names":["getFieldsFromColumns","fields","columns","title","key","dataIndex","column","fieldName","Array","set","cleanupDataSource","dataSource","data","newData","fieldValue","get","recordValue","ExportTableButton","fileName","disabled","btnProps","showColumnPicker","props","showModal","setShowModal","React","fieldsOrColumns","selectedFields","setSelectedFields","Object","useEffect","handleDownloadCSV","selectedFieldsInOriginalOrder","csv","greedy","header","blob","a","window","document","handleCheckboxChange","newSelectedFields","union","difference","onClick","visible","onOk","onCancel","width","okButtonProps","okText","className","value","style","padding","margin","defaultChecked","checked","onChange","e","getGroupedColumnKeysFromChildren","keys","child","createDefaultFuseKeys","firstRecord","children","SearchTableInput","searchFunction","setDataSource","debounce","inputProps","placeholder","fuzzySearch","fuseProps","query","setQuery","useState","allData","useRef","fuse","_fuseProps","threshold","searchTable","searchTerm","newResults","res","searchTableDebounced","debounceFn","results","searchFn","leading","trailing","handleInputChange","allowClear","useMountedState","ref","state","useCallback","Table","exportable","exportableProps","searchable","searchableProps","otherProps","isMounted","isExportable","isSearchable","searchDataSource","setSearchDataSource","display","justifyContent","marginBottom"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,OAAA,EAAA;AAG3B,MAAMC,MAAM,GAAZ,EAAA;AACAC,EAAAA,OAAO,IAAPA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAPA,OAAAA,CAAiB,UAAA,MAAA,EAAA;;;QACPC,KAAAA,GAA0BG,MAAAA,CAA1BH,K;QAAOC,GAAAA,GAAmBE,MAAAA,CAAnBF,G;QAAKC,SAAAA,GAAcC,MAAAA,CAAdD,S;AACpB,QAAME,SAAS,GAAA,CAAA,IAAA,GACZC,KAAK,CAALA,OAAAA,CAAAA,SAAAA,IAA2BH,SAAS,CAATA,IAAAA,CAA3BG,GAA2BH,CAA3BG,GADY,SAAA,KAAA,IAAA,GAAA,IAAA,GAAf,GAAA;;AAEA,QAAA,SAAA,EAAe;AACbC,MAAAA,GAAG,CAAA,MAAA,EAAA,SAAA,EAAHA,KAAG,CAAHA;AACD;AANHP,GAAAA,CAAAA;AASA,SAAA,MAAA;AAbF,CAAA;;AAgBA,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,EAAA;AACxB,MAAI,CAAA,UAAA,IAAeC,UAAU,CAAVA,MAAAA,KAAnB,CAAA,EAA4C;AAC1C,WAAO;AAAEC,MAAAA,IAAI,EAAN,EAAA;AAAYX,MAAAA,MAAM,EAAE;AAApB,KAAP;AACD;;AAED,MAAMY,OAAO,GAAA,GAAA,MAAA,CAAb,UAAa,CAAb;AACA,MAAMZ,MAAM,GAAG,cAAc,CAAd,GAAA,CAAmB,UAAA,SAAA,EAAS;AACzC,QAAMa,UAAU,GAAGC,GAAG,CAAA,gBAAA,EAAtB,SAAsB,CAAtB;;AACA,QAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,aAAA,UAAA;AACD;;AACD,WAAOD,UAAU,CAAVA,MAAAA,IAAP,EAAA;AALF,GAAe,CAAf;AAQA,MAAMF,IAAI,GAAG,OAAO,CAAP,GAAA,CAAY,UAAA,MAAA,EAAA,QAAA,EAAA;AACvB,WAAO,cAAc,CAAd,GAAA,CAAmB,UAAA,SAAA,EAAS;AACjC,UAAME,UAAU,GAAGC,GAAG,CAAA,gBAAA,EAAtB,SAAsB,CAAtB;AACA,UAAMC,WAAW,GAAGD,GAAG,CAAA,MAAA,EAAvB,SAAuB,CAAvB;;AACA,UAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,eAAA,WAAA;AACD;;AACD,aAAO,CAAA,UAAU,IAAV,IAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,SAAA,CAAA,WAAA,EAAA,MAAA,EAAA,QAAA,CAAA,KAAP,IAAA;AANF,KAAO,CAAP;AADF,GAAa,CAAb;AAWA,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA;AAzBF,CAAA;;IA4BaE,iBAAiB,GAAsC,SAAvDA,iBAAuD,CAAA,KAAA,EAAK;;;0BASnEK,KAAAA,CAPFX,U;MAAAA,UAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAa,EAAbA,GAAa,iB;MACbO,QAAAA,GAMEI,KAAAA,CANFJ,Q;MACAjB,MAAAA,GAKEqB,KAAAA,CALFrB,M;MACAkB,QAAAA,GAIEG,KAAAA,CAJFH,Q;MACAC,QAAAA,GAGEE,KAAAA,CAHFF,Q;uBAGEE,KAAAA,CAFFpB,O;MAAAA,OAAAA,GAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAU,EAAVA,GAAU,c;8BAERoB,KAAAA,CADFD,gB;MAAAA,gBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAmB,KAAnBA,GAAmB,qB;;wBAGaI,KAAK,CAALA,QAAAA,CAAAA,KAAAA,C;MAA3BF,SAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;MAAWC,YAAAA,GAAAA,eAAAA,CAAAA,CAAAA,C;;AAElB,MAAME,eAAe,GAAGzB,MAAH,IAAA,IAAGA,GAAH,MAAGA,GAAUD,oBAAoB,CAAtD,OAAsD,CAAtD;;yBAE4C,KAAK,CAAL,QAAA,CAAe,YAAA;AACzD,QAAA,MAAA,EAAY;AACV,aAAO6B,MAAM,CAANA,IAAAA,CAAP,MAAOA,CAAP;AADF,KAAA,MAEO,IAAA,OAAA,EAAa;AAClB,aAAOA,MAAM,CAANA,IAAAA,CAAY7B,oBAAoB,CAAvC,OAAuC,CAAhC6B,CAAP;AACD;;AAED,WAAA,EAAA;AAP0C,GAAA,C;MAArCF,cAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,C;MAAgBC,iBAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,C;;AAUvBE,EAAAA,SAAS,CAAC,YAAA;AACR,QAAA,MAAA,EAAY;AACVF,MAAAA,iBAAiB,CAACC,MAAM,CAANA,IAAAA,CAAlBD,MAAkBC,CAAD,CAAjBD;AADF,KAAA,MAEO,IAAA,OAAA,EAAa;AAClBA,MAAAA,iBAAiB,CAACC,MAAM,CAANA,IAAAA,CAAY7B,oBAAoB,CAAlD4B,OAAkD,CAAhCC,CAAD,CAAjBD;AACD;AALM,GAAA,EAMN,CAAA,MAAA,EANHE,OAMG,CANM,CAATA;AAQA,MAAMC,iBAAiB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAA;AAC1C,QAAI,CAAJ,UAAA,EAAiB;AACf;AACD;;AAED,QAAIC,6BAA6B,GAAG,MAAM,CAAN,IAAA,CAAA,eAAA,EAAA,MAAA,CAClC,UAAA,IAAA,EAAI;AAAA,aAAIL,cAAc,CAAdA,OAAAA,CAAAA,IAAAA,IAA+B,CAAnC,CAAA;AADN,KAAoC,CAApC;AAIA,QAAMf,IAAI,GAAGF,iBAAiB,CAAA,UAAA,EAAA,eAAA,EAA9B,6BAA8B,CAA9B;AAMA,QAAMuB,GAAG,GAAG,IAAI,CAAJ,OAAA,CAAA,IAAA,EAAmB;AAC7BC,MAAAA,MAAM,EADuB,IAAA;AAE7BC,MAAAA,MAAM,EAAE;AAFqB,KAAnB,CAAZ;AAIA,QAAMC,IAAI,GAAG,IAAA,IAAA,CAAS,CAAtB,GAAsB,CAAT,CAAb;AACA,QAAMC,CAAC,GAAGC,MAAM,CAANA,QAAAA,CAAAA,aAAAA,CAAV,GAAUA,CAAV;AACAD,IAAAA,CAAC,CAADA,IAAAA,GAASC,MAAM,CAANA,GAAAA,CAAAA,eAAAA,CAATD,IAASC,CAATD;AACAA,IAAAA,CAAC,CAADA,QAAAA,GAAAA,CAAgBnB,QAAQ,IAAxBmB,OAAAA,IAAAA,MAAAA;AACAE,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,CAAAA;AACAF,IAAAA,CAAC,CAADA,KAAAA;AACAE,IAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,CAAAA;AAEAf,IAAAA,YAAY,CAAZA,KAAY,CAAZA;AA3BwB,GAAA,EA4BvB,CAAA,UAAA,EAAA,eAAA,EAAA,cAAA,EA5BH,QA4BG,CA5BuB,CAA1B;AA8BA,MAAMgB,oBAAoB,GAAG,KAAK,CAAL,WAAA,CAC3B,UAAA,GAAA,EAAA,OAAA,EAAA;AACE,QAAIC,iBAAiB,GAAA,GAAA,MAAA,CAArB,cAAqB,CAArB;;AACA,QAAA,OAAA,EAAa;AACXA,MAAAA,iBAAiB,GAAGC,KAAK,CAAA,iBAAA,EAAoB,CAA7CD,GAA6C,CAApB,CAAzBA;AADF,KAAA,MAEO;AACLA,MAAAA,iBAAiB,GAAGE,UAAU,CAAA,iBAAA,EAAoB,CAAlDF,GAAkD,CAApB,CAA9BA;AACD;;AAEDb,IAAAA,iBAAiB,CAAjBA,iBAAiB,CAAjBA;AATyB,GAAA,EAW3B,CAXF,cAWE,CAX2B,CAA7B;AAcA,SACEH,KAAAA,CAAAA,aAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACEmB,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,aACPvB,gBAAgB,GAAGG,YAAY,CAAf,IAAe,CAAf,GAAwBO,iBADjC,EAAA;AAAA,KADX;AAIEZ,IAAAA,QAAQ,EAAEA;AAJZ,GAAA,EAAA,QAAA,CAAA,EAAA,CAAA,eAAA,GAOGG,KAAK,CAPR,QAAA,KAAA,IAAA,GAAA,eAAA,GADFG,eACE,CADFA,EAUGJ,gBAAgB,GACf,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEwB,IAAAA,OAAO,EAAEtB,SADX;AAEEuB,IAAAA,IAAI,EAAE,SAAA,IAAA,GAAA;AAAA,aAAMf,iBAAN,EAAA;AAAA,KAFR;AAGEgB,IAAAA,QAAQ,EAAE,SAAA,QAAA,GAAA;AAAA,aAAMvB,YAAY,CAAlB,KAAkB,CAAlB;AAAA,KAHZ;AAIEwB,IAAAA,KAAK,EAAE,GAJT;AAKEC,IAAAA,aAAa,EAAE;AACb9B,MAAAA,QAAQ,EAAEQ,cAAc,CAAdA,MAAAA,GADG,CAAA;AAEbxB,MAAAA,KAAK,EACHwB,cAAc,CAAdA,MAAAA,GAAAA,CAAAA,GAAAA,oCAAAA,GAEI;AALO,KALjB;AAYEuB,IAAAA,MAAM,EAAE,QAZV;AAaE/C,IAAAA,KAAK,EAAE;AAbT,GAAA,EAeE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKgD,IAAAA,SAAS,EAAC;AAAf,GAAA,EACG,MAAM,CAAN,OAAA,CAAA,eAAA,EAAA,GAAA,CAAoC,UAAA,KAAA,EAAA;;;QAAE/C,GAAAA,GAAAA,KAAAA,CAAAA,CAAAA,C;QAAKgD,KAAAA,GAAAA,KAAAA,CAAAA,CAAAA,C;AAC1C,WACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACEhD,MAAAA,GAAG,EAAEA,GADP;AAEEiD,MAAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAT,CAAA;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAFT;AAGEC,MAAAA,cAAc,EAAE,IAHlB;AAIEC,MAAAA,OAAO,EAAE9B,cAAc,CAAdA,OAAAA,CAAAA,GAAAA,IAA8B,CAAC,CAJ1C;AAKE+B,MAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,CAAA,EAAC;AAAA,eAAIlB,oBAAoB,CAAA,GAAA,EAAMmB,CAAC,CAADA,MAAAA,CAA9B,OAAwB,CAAxB;AAAA;AALb,KAAA,EAOG,OAAA,KAAA,KAAA,QAAA,GAAA,KAAA,GAAA,CAAA,aAAA,GAAoCP,KAApC,IAAA,IAAoCA,GAApC,KAAA,CAAoCA,GAAAA,KAAK,CAAzC,MAAA,KAAA,IAAA,GAAA,aAAA,GARL,EACE,CADF;AAlBS,GAiBV,CADH,CAfF,CADe,GAXrB,IACE3B,CADF;AA8CD,C;;AClLD,IAAMmC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAA,MAAA,EAAA,IAAA,EAAA;MAAcC,IAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,IAAAA,GAAO,EAAPA;;;AACrD,OAAA,IAAA,SAAA,GAAA,+BAAA,CAAoBvD,MAAM,CAA1B,QAAA,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAAqC;AAAA,QAA1BwD,KAA0B,GAAA,KAAA,CAAA,KAAA;;AACnC,QAAIA,KAAK,CAALA,QAAAA,IAAkBtD,KAAK,CAALA,OAAAA,CAAcsD,KAAK,CAAzC,QAAsBtD,CAAtB,EAAqD;AACnD;AACAqD,MAAAA,IAAI,GAAGD,gCAAgC,CAAA,KAAA,EAAvCC,IAAuC,CAAvCA;AAFF,KAAA,MAGO;AACL,UAAI,CAACC,KAAK,CAAV,SAAA,EAAsB;AACpB;AACD;;AAED,UAAItD,KAAK,CAALA,OAAAA,CAAcsD,KAAK,CAAvB,SAAItD,CAAJ,EAAoC;AAClCqD,QAAAA,IAAI,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,CAAaC,KAAK,CAALA,SAAAA,CAAAA,IAAAA,CAAjBD,GAAiBC,CAAb,CAAA,CAAJD;AACA;AACD;;AAEDA,MAAAA,IAAI,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,CAAaC,KAAK,CAAtBD,SAAI,CAAA,CAAJA;AACD;AACF;;AAED,SAAA,IAAA;AAnBF,CAAA;;AAsBA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,UAAA,EAAA,OAAA,EAAA;AAC5B,MAAMC,WAAW,GAAGrD,UAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAA9B,CAA8B,CAA9B;AACA,MAAMkD,IAAI,GAAG,OAAO,CAAP,GAAA,CACN,UAAA,MAAA,EAAM;QACDxD,SAAAA,GAAwBC,MAAAA,CAAxBD,S;QAAW4D,QAAAA,GAAa3D,MAAAA,CAAb2D,Q,CADV,CACUA;;AAEnB,QAAIA,QAAQ,IAAIzD,KAAK,CAALA,OAAAA,CAAhB,QAAgBA,CAAhB,EAAyC;AACvC,UAAMqD,KAAI,GAAGD,gCAAgC,CAAA,MAAA,EAA7C,EAA6C,CAA7C;;AACA,aAAOC,KAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,KAAI,CAAX,IAAOA,EAAP;AACD,KANQ,CAMR;;;AAED,QAAIrD,KAAK,CAALA,OAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AAC5B,aAAOH,SAAS,CAATA,IAAAA,CAAP,GAAOA,CAAP;AACD,KAVQ,CAUR;AAGD;;;AACA,QACE2D,WAAW,IACXnC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAA+BmC,WAAW,CAA1CnC,SAA0C,CAA1CA,MADAmC,iBAAAA,IAGA,OAAA,SAAA,KAJF,QAAA,EAKE;AACA,YAAM,IAAA,KAAA,CAAA,MAAA,SAAA,GAAN,wHAAM,CAAN;AAGD;;AACD,WAAA,SAAA;AAzBS,GAAA,EAAA,MAAA,CA2BH,UAAA,SAAA,EAAS;AAAA,WAAI,CAAC,CAAL,SAAA;AA3BN,GAAA,EAAA,IAAA,CAAA,EAAA,EAAA,MAAA,CA6BH,UAAA,SAAA,EAAS;AAAA,WAAI,OAAA,SAAA,KAAJ,QAAA;AA7BnB,GAAa,CAAb,CAF4B,CAE5B;;AA+BA,SAAA,IAAA;AAjCF,CAAA;;AAoCA,IAAaE,gBAAgB,GAAqC,SAArDA,gBAAqD,CAAA,IAAA,EAAA;iCAChEC,c;MAAAA,cAAAA,GAAAA,mBAAAA,KAAAA,KAAAA,CAAAA,GAAiB,IAAjBA,GAAiB,mB;MACjBxD,UAAAA,GAAAA,IAAAA,CAAAA,U;MACAyD,aAAAA,GAAAA,IAAAA,CAAAA,a;2BACAC,Q;MAAAA,QAAAA,GAAAA,aAAAA,KAAAA,KAAAA,CAAAA,GAAW,IAAXA,GAAW,a;6BACXC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa;AACXC,IAAAA,WAAW,EAAE;AADF,GAAbD,GAAa,e;8BAGbE,W;MAAAA,WAAAA,GAAAA,gBAAAA,KAAAA,KAAAA,CAAAA,GAAc,KAAdA,GAAc,gB;MACdtE,OAAAA,GAAAA,IAAAA,CAAAA,O;MACAuE,SAAAA,GAAAA,IAAAA,CAAAA,S;;kBAE0BG,QAAQ,CAAA,EAAA,C;MAA3BF,KAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAOC,QAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AACd,MAAME,OAAO,GAAGC,MAAhB,EAAA;AACA,MAAMC,IAAI,GAAGD,MAAb,EAAA;;AAEA,MAAME,UAAU,GAAG,KAAK,CAAL,OAAA,CAAc,YAAA;AAC/B,WAAA,QAAA,CAAA;AACEnB,MAAAA,IAAI,EAAEE,qBAAqB,CAAA,UAAA,EAD7B,OAC6B,CAD7B;AAEEkB,MAAAA,SAAS,EAAET,WAAW,GAAA,GAAA,GAAS;AAFjC,KAAA,EAAA,SAAA,CAAA;AADiB,GAAA,EAMhB,CAAA,SAAA,EAAA,UAAA,EAAA,OAAA,EANH,WAMG,CANgB,CAAnB;;AAQA,MAAMU,WAAW,GAAG,SAAdA,WAAc,CAAA,WAAA,EAAA,UAAA,EAAA;QAAqBC,UAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,UAAAA,GAAa,EAAbA;;;AACvC,QAAIA,UAAU,KAAVA,EAAAA,IAAqB,CAArBA,IAAAA,IAA8B,CAACJ,IAAI,CAAvC,OAAA,EAAiD;AAC/C,aAAOF,OAAO,CAAd,OAAA;AACD;;AAED,QAAMO,UAAU,GAAG,IAAI,CAAJ,OAAA,CAAA,MAAA,CAAA,UAAA,EAAA,GAAA,CAAoC,UAAA,GAAA,EAAG;AAAA,aAAIC,GAAG,CAAP,IAAA;AAA1D,KAAmB,CAAnB;AACA,WAAA,UAAA;AANF,GAAA;;AASA,MAAMC,oBAAoB,GAAG,KAAK,CAAL,WAAA,CAC3BC,UAAU,CACR,UAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA;AACE,QAAMC,OAAO,GAAGC,QAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,QAAQ,CAAA,UAAA,EAAxB,UAAwB,CAAxB;AACArB,IAAAA,aAAa,CAAbA,OAAa,CAAbA;AAHM,GAAA,EAAA,GAAA,EAMR;AACEsB,IAAAA,OAAO,EADT,KAAA;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GANQ,CADiB,EAA7B,EAA6B,CAA7B;;AAeA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,CAAA,EAAA;AACxB,QAAMxC,KAAK,GAAGO,CAAC,CAADA,MAAAA,CAAd,KAAA;AACAgB,IAAAA,QAAQ,CAARA,KAAQ,CAARA;;AAEA,QAAA,QAAA,EAAc;AACZW,MAAAA,oBAAoB,CAAA,UAAA,EAAA,KAAA,EAAoBnB,cAApB,IAAA,IAAoBA,GAApB,cAAoBA,GAAxCmB,WAAoB,CAApBA;AADF,KAAA,MAEO;AAAA,UAAA,eAAA;;AACL,UAAME,OAAO,GAAA,CAAA,eAAA,GACXrB,cADW,IAAA,IACXA,GADW,KAAA,CACXA,GAAAA,cAAc,CAAA,UAAA,EADH,KACG,CADH,KAAA,IAAA,GAAA,eAAA,GAC4Be,WAAW,CAAA,UAAA,EADpD,KACoD,CADpD;AAEAd,MAAAA,aAAa,CAAbA,OAAa,CAAbA;AACD;AAVH,GAAA;;AAaAtC,EAAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAJ,UAAA,EAAiB;AACf;AACD;;AAED+C,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,GAAAA,MAAAA,CAAAA,UAAAA,CAAAA;AACAE,IAAAA,IAAI,CAAJA,OAAAA,GAAe,IAAA,IAAA,CAAA,UAAA,EAAfA,UAAe,CAAfA;AANO,GAAA,EAON,CAAA,UAAA,EAPHjD,UAOG,CAPM,CAATA;AASAA,EAAAA,SAAS,CAAC,YAAA;AACR;AACA;AACA,QAAI,CAAA,UAAA,IAAe,CAAnB,KAAA,EAA2B;AACzB;AACD;;AAED,QAAA,QAAA,EAAc;AACZwD,MAAAA,oBAAoB,CAAA,UAAA,EAAA,KAAA,EAAoBnB,cAApB,IAAA,IAAoBA,GAApB,cAAoBA,GAAxCmB,WAAoB,CAApBA;AADF,KAAA,MAEO;AAAA,UAAA,gBAAA;;AACL,UAAME,OAAO,GAAA,CAAA,gBAAA,GACXrB,cADW,IAAA,IACXA,GADW,KAAA,CACXA,GAAAA,cAAc,CAAA,UAAA,EADH,KACG,CADH,KAAA,IAAA,GAAA,gBAAA,GAC4Be,WAAW,CAAA,UAAA,EADpD,KACoD,CADpD;AAEAd,MAAAA,aAAa,CAAbA,OAAa,CAAbA;AACD;AAbM,GAAA,EAcN,CAAA,KAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,cAAA,EAAA,aAAA,EAdHtC,QAcG,CAdM,CAATA;AAuBA,SACEL,KAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACE2B,IAAAA,KAAK,EAAEsB,KADTjD;AAEEiC,IAAAA,QAAQ,EAAEkC,iBAFZnE;AAGE8C,IAAAA,WAAW,EAAC,WAHd9C;AAIEoE,IAAAA,UAAU,EAAA;AAJZpE,GAAAA,EADF,UACEA,CAAAA,CADF;AA7FK,CAAP;;SCvFgBqE,e,GAAAA;AACd,MAAMC,GAAG,GAAGjB,MAAM,CAAlB,KAAkB,CAAlB;AACA,MAAMkB,KAAK,GAAGC,WAAW,CAAC,YAAA;AAAA,WAAMF,GAAG,CAAT,OAAA;AAAD,GAAA,EAAzB,EAAyB,CAAzB;AACAjE,EAAAA,SAAS,CAAC,YAAA;AACRiE,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,IAAAA;AACA,WAAO,YAAA;AACLA,MAAAA,GAAG,CAAHA,OAAAA,GAAAA,KAAAA;AADF,KAAA;AAFFjE,GAAS,CAATA;AAOA,SAAA,KAAA;AACD;;ICcYoE,KAAK,GAA+B,SAApCA,KAAoC,CAAA,IAAA,EAAA;;;6BAC/CC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,KAAbA,GAAa,e;MACbC,eAAAA,GAAAA,IAAAA,CAAAA,e;6BACAC,U;MAAAA,UAAAA,GAAAA,eAAAA,KAAAA,KAAAA,CAAAA,GAAa,KAAbA,GAAa,e;MACbC,eAAAA,GAAAA,IAAAA,CAAAA,e;MACA3F,UAAAA,GAAAA,IAAAA,CAAAA,U;MACAT,OAAAA,GAAAA,IAAAA,CAAAA,O;MACGqG,UAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,YAAAA,EAAAA,SAAAA,CAAAA,C;;AAEH,MAAMC,SAAS,GAAGV,eAAlB,EAAA;AACA,MAAMW,YAAY,GAAGN,UAAU,IAA/B,eAAA;AACA,MAAMO,YAAY,GAAGL,UAAU,IAA/B,eAAA;;kBACgDzB,QAAQ,CAAA,UAAA,C;MAAjD+B,gBAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAkBC,mBAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AAEzB9E,EAAAA,SAAS,CAAC,YAAA;AACR,QAAI4E,YAAY,IAAIF,SAApB,EAAA,EAAiC;AAC/BI,MAAAA,mBAAmB,CAAnBA,UAAmB,CAAnBA;AACD;AAHM,GAAA,EAIN,CAAA,YAAA,EAAA,UAAA,EAJH9E,SAIG,CAJM,CAATA;AAMA,SACEL,KAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE4B,IAAAA,KAAK,EAAE;AACLwD,MAAAA,OAAO,EADF,MAAA;AAELC,MAAAA,cAAc,EAFT,eAAA;AAGLC,MAAAA,YAAY,EAAE;AAHT;AADT,GAAA,EAOGN,YAAY,GACXhF,KAAAA,CAAAA,aAAAA,CAAAA,iBAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACEd,IAAAA,UAAU,EAAEA,UADdc;AAEEvB,IAAAA,OAAO,EAAEA;AAFXuB,GAAAA,EADW,eACXA,CAAAA,CADW,GAPf,IAAA,EAcGiF,YAAY,GACX,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACExG,IAAAA,OAAO,EAAEA,OADX;AAEES,IAAAA,UAAU,EAAEA,UAFd;AAGEyD,IAAAA,aAAa,EAAEwC;AAHjB,GAAA,EAIMN,eAJN,EAIMA;AACJhC,IAAAA,UAAU,EAAA,QAAA,CAAA;AACRjB,MAAAA,KAAK,EAAA,QAAA,CAAA;AACHL,QAAAA,KAAK,EAAEyD,YAAY,GAAA,KAAA,GAAW;AAD3B,OAAA,EAEAH,eAFA,IAAA,IAEAA,GAFA,KAAA,CAEAA,GAFA,CAAA,qBAAA,GAEAA,eAAe,CAFf,UAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAEAA,qBAAAA,CAFA,KAAA;AADG,KAAA,EAKLA,eALK,IAAA,IAKLA,GALK,KAAA,CAKLA,GAAAA,eAAe,CALV,UAAA;AADNA,GAJN,CAAA,CADW,GAfjB7E,IACE,CADFA,EA+BEA,KAAAA,CAAAA,aAAAA,CAAAA,OAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACEd,IAAAA,UAAU,EAAE+F,YAAY,GAAA,gBAAA,GAAsB/F,UADhDc;AAEEvB,IAAAA,OAAO,EAAEA;AAFXuB,GAAAA,EAhCJ,UAgCIA,CAAAA,CA/BFA,CADF;AApBK,C","sourcesContent":["import React, { Fragment, ReactChild, ReactNode, useEffect } from \"react\";\r\nimport { Button, Modal, Checkbox } from \"antd\";\r\nimport Papa from \"papaparse\";\r\nimport difference from \"lodash/difference\";\r\nimport union from \"lodash/union\";\r\nimport get from \"lodash/get\";\r\nimport set from \"lodash/set\";\r\nimport { ColumnsType, ColumnGroupType, ColumnType } from \"antd/lib/table\";\r\nimport { ButtonProps } from \"antd/lib/button\";\r\n\r\nexport interface ITableExportFields {\r\n  [dataIndex: string]:\r\n    | string\r\n    | {\r\n        header: string;\r\n        formatter?: (fieldValue: any, record: any, index: number) => string;\r\n      };\r\n}\r\n\r\nexport interface IExportFieldButtonProps {\r\n  /** Ant table's dataSource */\r\n  dataSource?: any[];\r\n  /** Ant table's columns */\r\n  columns?: ColumnsType<any>;\r\n  /** File name to use when exporting to csv */\r\n  fileName?: string;\r\n  /** Customize csv file like column header names, fields to include/exclude. More on this below. */\r\n  fields?: ITableExportFields;\r\n  /** Disables export button. Useful when you want to disable when dataSource is loading. */\r\n  disabled?: boolean;\r\n  /** Any of Ant Button component props as object. */\r\n  btnProps?: ButtonProps;\r\n  /** Can be used to change text in button. */\r\n  children?: ReactChild | ReactNode;\r\n  /** Shows a modal to pick which columns to include exported file. */\r\n  showColumnPicker?: boolean;\r\n}\r\n\r\ntype ColumnWithDataIndex = (ColumnGroupType<any> | ColumnType<any>) & {\r\n  dataIndex?: string | string[];\r\n};\r\n\r\nconst getFieldsFromColumns = (\r\n  columns: ColumnsType<any>\r\n): ITableExportFields => {\r\n  const fields = {};\r\n  columns?.forEach((column: ColumnWithDataIndex) => {\r\n    const { title, key, dataIndex } = column;\r\n    const fieldName =\r\n      (Array.isArray(dataIndex) ? dataIndex.join(\".\") : dataIndex) ?? key;\r\n    if (fieldName) {\r\n      set(fields, fieldName, title);\r\n    }\r\n  });\r\n\r\n  return fields;\r\n};\r\n\r\nconst cleanupDataSource = (dataSource, exportFieldNames, selectedFields) => {\r\n  if (!dataSource || dataSource.length === 0) {\r\n    return { data: [], fields: [] };\r\n  }\r\n\r\n  const newData = [...dataSource];\r\n  const fields = selectedFields.map(fieldName => {\r\n    const fieldValue = get(exportFieldNames, fieldName);\r\n    if (typeof fieldValue === \"string\") {\r\n      return fieldValue;\r\n    }\r\n    return fieldValue.header || \"\";\r\n  });\r\n\r\n  const data = newData.map((record, rowIndex) => {\r\n    return selectedFields.map(fieldName => {\r\n      const fieldValue = get(exportFieldNames, fieldName);\r\n      const recordValue = get(record, fieldName);\r\n      if (typeof fieldValue === \"string\") {\r\n        return recordValue;\r\n      }\r\n      return fieldValue?.formatter(recordValue, record, rowIndex) || null;\r\n    });\r\n  });\r\n\r\n  return [fields, ...data];\r\n};\r\n\r\nexport const ExportTableButton: React.FC<IExportFieldButtonProps> = props => {\r\n  const {\r\n    dataSource = [],\r\n    fileName,\r\n    fields,\r\n    disabled,\r\n    btnProps,\r\n    columns = [],\r\n    showColumnPicker = false,\r\n  } = props;\r\n\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n  const fieldsOrColumns = fields ?? getFieldsFromColumns(columns);\r\n\r\n  const [selectedFields, setSelectedFields] = React.useState(() => {\r\n    if (fields) {\r\n      return Object.keys(fields);\r\n    } else if (columns) {\r\n      return Object.keys(getFieldsFromColumns(columns));\r\n    }\r\n\r\n    return [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (fields) {\r\n      setSelectedFields(Object.keys(fields));\r\n    } else if (columns) {\r\n      setSelectedFields(Object.keys(getFieldsFromColumns(columns)));\r\n    }\r\n  }, [fields, columns]);\r\n\r\n  const handleDownloadCSV = React.useCallback(() => {\r\n    if (!dataSource) {\r\n      return;\r\n    }\r\n\r\n    let selectedFieldsInOriginalOrder = Object.keys(fieldsOrColumns).filter(\r\n      name => selectedFields.indexOf(name) > -1\r\n    );\r\n\r\n    const data = cleanupDataSource(\r\n      dataSource,\r\n      fieldsOrColumns,\r\n      selectedFieldsInOriginalOrder\r\n    );\r\n\r\n    const csv = Papa.unparse(data, {\r\n      greedy: true,\r\n      header: false,\r\n    });\r\n    const blob = new Blob([csv]);\r\n    const a = window.document.createElement(\"a\");\r\n    a.href = window.URL.createObjectURL(blob);\r\n    a.download = `${fileName || \"table\"}.csv`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n\r\n    setShowModal(false);\r\n  }, [dataSource, fieldsOrColumns, selectedFields, fileName]);\r\n\r\n  const handleCheckboxChange = React.useCallback(\r\n    (key, checked) => {\r\n      let newSelectedFields = [...selectedFields];\r\n      if (checked) {\r\n        newSelectedFields = union(newSelectedFields, [key]);\r\n      } else {\r\n        newSelectedFields = difference(newSelectedFields, [key]);\r\n      }\r\n\r\n      setSelectedFields(newSelectedFields);\r\n    },\r\n    [selectedFields]\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        onClick={() =>\r\n          showColumnPicker ? setShowModal(true) : handleDownloadCSV()\r\n        }\r\n        disabled={disabled}\r\n        {...btnProps}\r\n      >\r\n        {props.children ?? `Export to CSV`}\r\n      </Button>\r\n      {showColumnPicker ? (\r\n        <Modal\r\n          visible={showModal}\r\n          onOk={() => handleDownloadCSV()}\r\n          onCancel={() => setShowModal(false)}\r\n          width={400}\r\n          okButtonProps={{\r\n            disabled: selectedFields.length < 1,\r\n            title:\r\n              selectedFields.length < 1\r\n                ? \"Please select at least one column.\"\r\n                : null,\r\n          }}\r\n          okText={\"Export\"}\r\n          title={\"Select columns to export\"}\r\n        >\r\n          <div className=\"d-flex flex-column align-start\">\r\n            {Object.entries(fieldsOrColumns).map(([key, value]) => {\r\n              return (\r\n                <Checkbox\r\n                  key={key}\r\n                  style={{ padding: 0, margin: 0 }}\r\n                  defaultChecked={true}\r\n                  checked={selectedFields.indexOf(key) > -1}\r\n                  onChange={e => handleCheckboxChange(key, e.target.checked)}\r\n                >\r\n                  {typeof value === \"string\" ? value : value?.header ?? \"\"}\r\n                </Checkbox>\r\n              );\r\n            })}\r\n          </div>\r\n        </Modal>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ExportTableButton;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport debounceFn from \"lodash/debounce\";\r\nimport Fuse from \"fuse.js\";\r\nimport { InputProps } from \"antd/lib/input\";\r\nimport { ColumnsType } from \"antd/lib/table\";\r\n\r\nexport interface ISearchTableInputProps {\r\n  /** Custom function to search if you want to use your own search.\r\n   *  Takes dataSource and searchTerm and should return filtered dataSource.\r\n   */\r\n  searchFunction?: (dataSource: any[], searchTerm: string) => any[];\r\n\r\n  /** Ant table's dataSource. */\r\n  dataSource?: any[];\r\n\r\n  /** Ant table's columns */\r\n  columns?: ColumnsType<any>;\r\n\r\n  /** `setState` style function which updates dataSource. */\r\n  setDataSource?: (dataSource: any[]) => void;\r\n  /** Debounces search  */\r\n  debounce?: boolean;\r\n  /** Any of Ant Input component's props as object. */\r\n  inputProps?: InputProps;\r\n  /** Allow fuzzy search or search for exact search term. */\r\n  fuzzySearch?: boolean;\r\n  /** Uses Fuse.js for search. Pass any of fuse.js options here as object. */\r\n  fuseProps?: Fuse.IFuseOptions<any>;\r\n}\r\n\r\nconst getGroupedColumnKeysFromChildren = (column: any, keys = []) => {\r\n  for (const child of column.children) {\r\n    if (child.children && Array.isArray(child.children)) {\r\n      // If child has children, recurse\r\n      keys = getGroupedColumnKeysFromChildren(child, keys);\r\n    } else {\r\n      if (!child.dataIndex) {\r\n        continue;\r\n      }\r\n\r\n      if (Array.isArray(child.dataIndex)) {\r\n        keys = [...keys, child.dataIndex.join(\".\")];\r\n        continue;\r\n      }\r\n\r\n      keys = [...keys, child.dataIndex];\r\n    }\r\n  }\r\n\r\n  return keys;\r\n};\r\n\r\nconst createDefaultFuseKeys = (dataSource: any[], columns: any[]) => {\r\n  const firstRecord = dataSource?.[0];\r\n  const keys = columns\r\n    .map(column => {\r\n      const { dataIndex, children } = column;\r\n      // check if grouped column\r\n      if (children && Array.isArray(children)) {\r\n        const keys = getGroupedColumnKeysFromChildren(column, []);\r\n        return keys?.flat();\r\n      }\r\n      // ant table allows nested objects with array of strings as dataIndex\r\n      if (Array.isArray(dataIndex)) {\r\n        return dataIndex.join(\".\");\r\n      }\r\n\r\n      // If in actual dataIndex the record is object literal but column specified as string, throw error.\r\n      // Even though it's something you shouldn't do based on ant table's API, since users will see fuse.js `value.trim is not a function error` I'm throwing error.\r\n      if (\r\n        firstRecord &&\r\n        Object.prototype.toString.call(firstRecord[dataIndex]) ===\r\n          \"[object Object]\" &&\r\n        typeof dataIndex === \"string\"\r\n      ) {\r\n        throw new Error(\r\n          `'${dataIndex}' is an object in dataSource. But dataIndex is given as string. If it is an object, use array of strings as dataIndex.`\r\n        );\r\n      }\r\n      return dataIndex;\r\n    })\r\n    .filter(dataIndex => !!dataIndex)\r\n    .flat(10)\r\n    .filter(dataIndex => typeof dataIndex === \"string\"); // after flattening max depth 10, if there are still arrays, ignore\r\n\r\n  return keys;\r\n};\r\n\r\nexport const SearchTableInput: React.FC<ISearchTableInputProps> = ({\r\n  searchFunction = null,\r\n  dataSource,\r\n  setDataSource,\r\n  debounce = true,\r\n  inputProps = {\r\n    placeholder: \"Search...\",\r\n  },\r\n  fuzzySearch = false,\r\n  columns,\r\n  fuseProps,\r\n}) => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const allData = useRef<any[] | null>();\r\n  const fuse = useRef<Fuse<any> | null>();\r\n\r\n  const _fuseProps = React.useMemo(() => {\r\n    return {\r\n      keys: createDefaultFuseKeys(dataSource, columns),\r\n      threshold: fuzzySearch ? 0.6 : 0,\r\n      ...fuseProps,\r\n    };\r\n  }, [fuseProps, dataSource, columns, fuzzySearch]);\r\n\r\n  const searchTable = (_dataSource: any[], searchTerm = \"\") => {\r\n    if (searchTerm === \"\" || !fuse || !fuse.current) {\r\n      return allData.current;\r\n    }\r\n\r\n    const newResults = fuse.current.search(searchTerm).map(res => res.item);\r\n    return newResults;\r\n  };\r\n\r\n  const searchTableDebounced = React.useCallback(\r\n    debounceFn(\r\n      (dataSource: any, searchTerm: string, searchFn: any) => {\r\n        const results = searchFn?.(dataSource, searchTerm);\r\n        setDataSource(results);\r\n      },\r\n      100,\r\n      {\r\n        leading: false,\r\n        trailing: true,\r\n      }\r\n    ),\r\n    []\r\n  );\r\n\r\n  const handleInputChange = (e: { target: { value: any } }) => {\r\n    const value = e.target.value;\r\n    setQuery(value);\r\n\r\n    if (debounce) {\r\n      searchTableDebounced(dataSource, value, searchFunction ?? searchTable);\r\n    } else {\r\n      const results =\r\n        searchFunction?.(dataSource, value) ?? searchTable(dataSource, value);\r\n      setDataSource(results);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!dataSource) {\r\n      return;\r\n    }\r\n\r\n    allData.current = [...dataSource];\r\n    fuse.current = new Fuse(dataSource, _fuseProps);\r\n  }, [dataSource, _fuseProps]);\r\n\r\n  useEffect(() => {\r\n    // If dataSource updates dynamically (for example, swr or react-query mutates) and the input box is not empty,\r\n    // It should keep the new dataSource filtered if there is a value in input box\r\n    if (!dataSource || !query) {\r\n      return;\r\n    }\r\n\r\n    if (debounce) {\r\n      searchTableDebounced(dataSource, query, searchFunction ?? searchTable);\r\n    } else {\r\n      const results =\r\n        searchFunction?.(dataSource, query) ?? searchTable(dataSource, query);\r\n      setDataSource(results);\r\n    }\r\n  }, [\r\n    query,\r\n    dataSource,\r\n    searchTableDebounced,\r\n    searchFunction,\r\n    setDataSource,\r\n    debounce,\r\n  ]);\r\n\r\n  return (\r\n    <Input\r\n      value={query}\r\n      onChange={handleInputChange}\r\n      placeholder=\"Search...\"\r\n      allowClear\r\n      {...inputProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchTableInput;\r\n","import { useEffect, useRef, useCallback } from \"react\";\n\nexport function useMountedState() {\n  const ref = useRef(false);\n  const state = useCallback(() => ref.current, []);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  });\n\n  return state;\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table as AntTable } from \"antd\";\r\nimport { TableProps } from \"antd/lib/table\";\r\nimport ExportTableButton, {\r\n  IExportFieldButtonProps,\r\n} from \"./ExportTableButton\";\r\nimport SearchTableInput, { ISearchTableInputProps } from \"./SearchTableInput\";\r\nimport { useMountedState } from \"./hooks/isMounted\";\r\n\r\nexport * from \"./ExportTableButton\";\r\nexport * from \"./SearchTableInput\";\r\n\r\nexport type IExportableTableProps = TableProps<any> & IExportFieldButtonProps;\r\n\r\nexport type ITableUtils = {\r\n  /** Exportable Table */\r\n  exportable?: boolean;\r\n  /** Props object to customize export button */\r\n  exportableProps?: IExportFieldButtonProps;\r\n  /** Searchable Table */\r\n  searchable?: boolean;\r\n  /** Props object to customize export button */\r\n  searchableProps?: ISearchTableInputProps;\r\n};\r\n\r\nexport type ITableProps<T> = TableProps<T> & ITableUtils;\r\n\r\nexport const Table: React.FC<ITableProps<any>> = ({\r\n  exportable = false,\r\n  exportableProps,\r\n  searchable = false,\r\n  searchableProps,\r\n  dataSource,\r\n  columns,\r\n  ...otherProps\r\n}) => {\r\n  const isMounted = useMountedState();\r\n  const isExportable = exportable || exportableProps;\r\n  const isSearchable = searchable || searchableProps;\r\n  const [searchDataSource, setSearchDataSource] = useState<any>(dataSource);\r\n\r\n  useEffect(() => {\r\n    if (isSearchable && isMounted()) {\r\n      setSearchDataSource(dataSource);\r\n    }\r\n  }, [isSearchable, dataSource, isMounted]);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          marginBottom: 10,\r\n        }}\r\n      >\r\n        {isExportable ? (\r\n          <ExportTableButton\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            {...exportableProps}\r\n          />\r\n        ) : null}\r\n        {isSearchable ? (\r\n          <SearchTableInput\r\n            columns={columns}\r\n            dataSource={dataSource}\r\n            setDataSource={setSearchDataSource}\r\n            {...searchableProps}\r\n            inputProps={{\r\n              style: {\r\n                width: isExportable ? \"60%\" : \"100%\",\r\n                ...searchableProps?.inputProps?.style,\r\n              },\r\n              ...searchableProps?.inputProps,\r\n            }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n      <AntTable\r\n        dataSource={isSearchable ? searchDataSource : dataSource}\r\n        columns={columns}\r\n        {...otherProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}